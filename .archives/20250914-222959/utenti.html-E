<!DOCTYPE html>
<html lang="it">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gestione Dipendenti - BADGEBOX</title>

  <!-- PWA Meta -->
  <meta name="theme-color" content="#0d1b2a" />
  <meta name="mobile-web-app-capable" content="yes" />
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
  <meta name="apple-mobile-web-app-title" content="BADGEBOX" />

  <!-- Icone PWA -->
  <link rel="icon" type="image/png" sizes="192x192" href="assets/icons/badgenode-192.png" />
  <link rel="apple-touch-icon" sizes="180x180" href="assets/icons/badgenode-192.png" />
  <link rel="manifest" href="manifest.json" />

  <!-- Runtime Config -->
  
  
  <!-- Performance optimizations -->
  <link rel="preconnect" href="https://txmjqrnitfsiytbytxlc.supabase.co" crossorigin>
  <link rel="preload" href="style.css" as="style">

  <!-- Stili dal file CSS esterno -->
  <link rel="stylesheet" href="style.css" />
  
</head>
<body>
  <div class="container">
    <div style="position: relative; text-align: center; margin-bottom: 10px;">
      <img src="assets/icons/BNLOGO.png" alt="BADGENODE Logo" style="width: 120px; height: auto; margin-bottom: 15px;" />
      <h1 style="margin: 0 0 4px 0;">Archivio Dipendenti</h1>
    </div>

    <table>
      <thead>
        <tr>
          <th>Storico</th>
          <th>PIN</th>
          <th>Nome</th>
          <th>Cognome</th>
          <th>Azioni</th>
        </tr>
      </thead>
      <tbody id="lista-dipendenti">
        <!-- Gli utenti verranno caricati dinamicamente -->
      </tbody>
    </table>

    <div style="display: flex; justify-content: center; margin-top: 20px;">
      <div style="width: 70%; display: flex; justify-content: space-between; align-items: center;">
        <button onclick="window.location.href='index.html'" style="
          background-color: #b45309;
          color: white;
          border: none;
          padding: 8px 16px;
          border-radius: 6px;
          font-size: 12px;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.3s ease;
          min-width: 100px;
          box-shadow: 0 2px 8px rgba(180, 83, 9, 0.3);
        " onmouseover="this.style.backgroundColor='#92400e'; this.style.transform='translateY(-1px)'"
           onmouseout="this.style.backgroundColor='#b45309'; this.style.transform='translateY(0)'">
          ‚Üê Login Utenti
        </button>

        <div style="display: flex; gap: 10px;">
          <button onclick="apriModalNuovoDipendente()" style="
            background-color: #16a34a;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 80px;
            box-shadow: 0 2px 8px rgba(22, 163, 74, 0.3);
          " onmouseover="this.style.backgroundColor='#15803d'; this.style.transform='translateY(-1px)'"
             onmouseout="this.style.backgroundColor='#16a34a'; this.style.transform='translateY(0)'">
            Aggiungi
          </button>

          <button onclick="window.location.href='ex-dipendenti.html'" style="
            background-color: #ca8a04;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 80px;
            box-shadow: 0 2px 8px rgba(202, 138, 4, 0.3);
          " onmouseover="this.style.backgroundColor='#a16207'; this.style.transform='translateY(-1px)'"
             onmouseout="this.style.backgroundColor='#ca8a04'; this.style.transform='translateY(0)'">
            ex Dipendenti
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Modale Nuovo Dipendente -->
  <div id="modalNuovoDipendente">
    <div class="modal-content">
      <div class="modal-header">
        <h2 class="modal-title">Aggiungi Nuovo Dipendente</h2>
        <button class="close-btn" onclick="chiudiModalNuovoDipendente()">√ó</button>
      </div>

      <div class="sezione-modal">
        <div class="sezione-titolo">üë§ Dati Anagrafici</div>
        <div class="campo-gruppo">
          <div>
            <div class="campo-label">Nome *</div>
            <input type="text" class="campo-valore" id="nuovo-nome" required>
          </div>
          <div>
            <div class="campo-label">Cognome *</div>
            <input type="text" class="campo-valore" id="nuovo-cognome" required>
          </div>
        </div>
        <div class="campo-gruppo">
          <div>
            <div class="campo-label">Email</div>
            <input type="email" class="campo-valore" id="nuovo-email">
          </div>
          <div>
            <div class="campo-label">Numero di Telefono</div>
            <input type="text" class="campo-valore" id="nuovo-telefono" placeholder="Non disponibile">
          </div>
        </div>
        <div class="campo-singolo">
          <div class="campo-label">PIN (1-99)</div>
          <input type="number" class="campo-valore" id="nuovo-pin" min="1" max="99">
        </div>
      </div>

      <div class="sezione-modal">
        <div class="sezione-titolo">üìÑ Contratto Attivo</div>
        <div class="campo-singolo">
          <div class="campo-label">Descrizione Contratto in Corso</div>
          <textarea class="campo-valore campo-textarea" id="nuovo-descrizione-contratto"
                    placeholder="Inserisci la descrizione del contratto attuale..."></textarea>
        </div>
        <div class="campo-singolo">
          <div class="campo-label">Ore max giornaliere da contratto *</div>
          <input type="number" class="campo-valore" id="nuovo-ore-contrattuali"
                 placeholder="8.00" step="0.25" min="0" max="24" value="8.00" required>
        </div>
      </div>

      <div class="modal-actions">
        <button class="btn-annulla" onclick="chiudiModalNuovoDipendente()">Annulla</button>
        <button class="btn-salva" onclick="salvaNuovoDipendente()">Salva</button>
      </div>
    </div>
  </div>

  <!-- Modale Modifica Dipendente -->
  <div id="modalModificaDipendente">
    <div class="modal-content">
      <div class="modal-header">
        <h2 class="modal-title">Modifica Dipendente</h2>
        <button class="close-btn" onclick="chiudiModalModificaDipendente()">√ó</button>
      </div>

      <div class="sezione-modal">
        <div class="sezione-titolo">üë§ Dati Anagrafici</div>
        <div class="campo-gruppo">
          <div>
            <div class="campo-label">Nome *</div>
            <input type="text" class="campo-valore" id="modifica-nome" required>
          </div>
          <div>
            <div class="campo-label">Cognome *</div>
            <input type="text" class="campo-valore" id="modifica-cognome" required>
          </div>
        </div>
        <div class="campo-gruppo">
          <div>
            <div class="campo-label">Email</div>
            <input type="email" class="campo-valore" id="modifica-email">
          </div>
          <div>
            <div class="campo-label">Numero di Telefono</div>
            <input type="text" class="campo-valore" id="modifica-telefono" placeholder="Non disponibile">
          </div>
        </div>
        <div class="campo-singolo">
          <div class="campo-label">PIN (1-99)</div>
          <input type="number" class="campo-valore" id="modifica-pin" min="1" max="99" readonly style="background-color: #374151; color: #94a3b8; cursor: not-allowed;">
        </div>
      </div>

      <div class="sezione-modal">
        <div class="sezione-titolo">üìÑ Contratto Attivo</div>
        <div class="campo-singolo">
          <div class="campo-label">Descrizione Contratto in Corso</div>
          <textarea class="campo-valore campo-textarea" id="modifica-descrizione-contratto"
                    placeholder="Inserisci la descrizione del contratto attuale..."></textarea>
        </div>
        <div class="campo-singolo">
          <div class="campo-label">Ore max giornaliere da contratto *</div>
          <input type="number" class="campo-valore" id="modifica-ore-contrattuali"
                 placeholder="8.00" step="0.25" min="0" max="24" required>
        </div>
      </div>

      <div class="modal-actions">
        <button class="btn-annulla" onclick="chiudiModalModificaDipendente()">Annulla</button>
        <button class="btn-salva" onclick="salvaModificaDipendente()">Salva</button>
      </div>
    </div>
  </div>

  <!-- Script principale -->
  <script type="module">
    import { supabaseClient } from './assets/scripts/supabase-client.js';

    let currentEditingPin = null;

    // Caricamento utenti
    async function caricaUtenti() {
      try {
        console.log('[UTENTI] Caricamento in corso...');

        const { data, error } = await supabaseClient
          .from('utenti')
          .select('*')
          .order('pin', { ascending: true });

        if (error) {
          console.error('[UTENTI] Errore Supabase:', error);
          throw error;
        }

        console.log('[UTENTI] Utenti caricati:', data?.length || 0);
        renderUtenti(data || []);

      } catch (error) {
        console.error('[UTENTI] Errore caricamento:', error);
        document.getElementById('lista-dipendenti').innerHTML = `
          <tr><td colspan="5" style="color: #ef4444; text-align: center; padding: 20px;">
            Errore caricamento: ${error.message}
          </td></tr>
        `;
      }
    }

    function renderUtenti(utenti) {
      const tbody = document.getElementById('lista-dipendenti');

      if (!tbody) {
        console.error('[UTENTI] Elemento lista-dipendenti non trovato');
        return;
      }

      if (utenti.length === 0) {
        tbody.innerHTML = `
          <tr><td colspan="5" style="text-align: center; padding: 20px; color: #94a3b8;">
            Nessun utente trovato
          </td></tr>
        `;
        return;
      }

      tbody.innerHTML = utenti.map(utente => `
        <tr>
          <td>
            <a href="storico.html?pin=${utente.pin}" style="color: #60a5fa; text-decoration: none;">
              <img src="assets/icons/orologio.png" alt="Storico" style="width: 20px; height: 20px;" />
            </a>
          </td>
          <td>${utente.pin}</td>
          <td>${utente.nome}</td>
          <td>${utente.cognome}</td>
          <td>
            <button onclick="modificaUtente(${utente.pin}, '${utente.nome}', '${utente.cognome}', '${utente.email || ''}', '${utente.telefono || ''}', '${utente.descrizione_contratto || ''}', ${utente.ore_contrattuali || 8.0})" 
                    title="Modifica dipendente" style="color: #3b82f6;">‚úèÔ∏è</button>
            <button onclick="archiviaUtente(${utente.pin}, '${utente.nome}', '${utente.cognome}')" 
                    title="Archivia dipendente" style="color: #f59e0b;">üì¶</button>
            <button onclick="eliminaUtente(${utente.pin}, '${utente.nome}', '${utente.cognome}')" 
                    title="Elimina" style="color: #ef4444;">‚ùå</button>
          </td>
        </tr>
      `).join('');
    }

    // Gestione modali
    window.apriModalNuovoDipendente = function() {
      document.getElementById('modalNuovoDipendente').style.display = 'flex';
      // Reset form
      ['nuovo-nome', 'nuovo-cognome', 'nuovo-email', 'nuovo-telefono', 'nuovo-pin', 'nuovo-descrizione-contratto'].forEach(id => {
        document.getElementById(id).value = '';
      });
      document.getElementById('nuovo-ore-contrattuali').value = '8.00';
      setTimeout(() => document.getElementById('nuovo-nome').focus(), 100);
    };

    window.chiudiModalNuovoDipendente = () => {
      document.getElementById('modalNuovoDipendente').style.display = 'none';
    };

    window.salvaNuovoDipendente = async function() {
      try {
        const nome = document.getElementById('nuovo-nome').value.trim();
        const cognome = document.getElementById('nuovo-cognome').value.trim();
        const email = document.getElementById('nuovo-email').value.trim();
        const telefono = document.getElementById('nuovo-telefono').value.trim();
        const pin = parseInt(document.getElementById('nuovo-pin').value);
        const descrizioneContratto = document.getElementById('nuovo-descrizione-contratto').value.trim();
        const oreContrattuali = parseFloat(document.getElementById('nuovo-ore-contrattuali').value) || 8.0;

        if (!nome || !cognome) {
          alert('Nome e Cognome sono obbligatori');
          return;
        }

        if (!pin || pin < 1 || pin > 99) {
          alert('PIN deve essere tra 1 e 99');
          return;
        }

        const { error } = await supabaseClient
          .from('utenti')
          .insert({
            pin,
            nome,
            cognome,
            email: email || null,
            telefono: telefono || null,
            descrizione_contratto: descrizioneContratto || null,
            ore_contrattuali: oreContrattuali
          });

        if (error) {
          if (error.code === '23505') {
            alert('Errore: PIN gi√† esistente. Scegli un PIN diverso.');
          } else {
            throw error;
          }
          return;
        }

        alert(`‚úÖ Dipendente ${nome} ${cognome} aggiunto con successo!`);
        window.chiudiModalNuovoDipendente();
        caricaUtenti();

      } catch (error) {
        console.error('Errore salvataggio:', error);
        alert('Errore nel salvataggio: ' + error.message);
      }
    };

    window.modificaUtente = function(pin, nome, cognome, email, telefono, descrizioneContratto, oreContrattuali) {
      currentEditingPin = pin;
      document.getElementById('modifica-nome').value = nome;
      document.getElementById('modifica-cognome').value = cognome;
      document.getElementById('modifica-email').value = email;
      document.getElementById('modifica-telefono').value = telefono;
      document.getElementById('modifica-pin').value = pin;
      document.getElementById('modifica-descrizione-contratto').value = descrizioneContratto;
      document.getElementById('modifica-ore-contrattuali').value = oreContrattuali;
      document.getElementById('modalModificaDipendente').style.display = 'flex';
    };

    window.chiudiModalModificaDipendente = () => {
      document.getElementById('modalModificaDipendente').style.display = 'none';
      currentEditingPin = null;
    };

    window.salvaModificaDipendente = async function() {
      const nome = document.getElementById('modifica-nome').value.trim();
      const cognome = document.getElementById('modifica-cognome').value.trim();
      const email = document.getElementById('modifica-email').value.trim();
      const telefono = document.getElementById('modifica-telefono').value.trim();
      const descrizioneContratto = document.getElementById('modifica-descrizione-contratto').value.trim();
      const oreContrattuali = parseFloat(document.getElementById('modifica-ore-contrattuali').value) || 8.0;

      if (!nome || !cognome) {
        alert('Nome e Cognome sono obbligatori');
        return;
      }

      try {
        const { error } = await supabaseClient
          .from('utenti')
          .update({
            nome,
            cognome,
            email: email || null,
            telefono: telefono || null,
            descrizione_contratto: descrizioneContratto || null,
            ore_contrattuali: oreContrattuali
          })
          .eq('pin', parseInt(currentEditingPin));

        if (error) throw error;

        alert(`‚úÖ Dipendente ${nome} ${cognome} aggiornato con successo!`);
        window.chiudiModalModificaDipendente();
        caricaUtenti();

      } catch (error) {
        console.error('Errore aggiornamento:', error);
        alert('Errore durante l\'aggiornamento: ' + error.message);
      }
    };

    window.archiviaUtente = async function(pin, nome, cognome) {
      if (!confirm(`‚ö†Ô∏è Archiviare ${nome} ${cognome}?\n\nQuesta azione sposter√† il dipendente nell'archivio e liberer√† il PIN.`)) return;

      try {
        const { data: dipendente, error: dipendenteError } = await supabaseClient
          .from('utenti')
          .select('*')
          .eq('pin', parseInt(pin))
          .single();

        if (dipendenteError) throw new Error('Dipendente non trovato');

        const { data: timbrature } = await supabaseClient
          .from('timbrature')
          .select('*')
          .eq('pin', parseInt(pin))
          .order('data', { ascending: true });

        const { error: archiviatiError } = await supabaseClient
          .from('dipendenti_archiviati')
          .insert({
            pin: dipendente.pin,
            nome: dipendente.nome,
            cognome: dipendente.cognome,
            email: dipendente.email,
            telefono: dipendente.telefono,
            ore_contrattuali: dipendente.ore_contrattuali,
            data_archiviazione: new Date().toISOString(),
            file_excel_path: JSON.stringify({ dipendente, timbrature: timbrature || [] }),
            file_excel_name: `${nome}_${cognome}_timbrature.csv`
          });

        if (archiviatiError) throw archiviatiError;

        const { error: deleteError } = await supabaseClient
          .from('utenti')
          .delete()
          .eq('pin', parseInt(pin));

        if (deleteError) console.error('Errore eliminazione:', deleteError);

        alert(`‚úÖ ${nome} ${cognome} archiviato con successo!\nTimbrature salvate: ${timbrature?.length || 0}\nPIN ${pin} ora disponibile.`);
        caricaUtenti();

      } catch (error) {
        console.error('Errore archiviazione:', error);
        alert('Errore durante l\'archiviazione: ' + error.message);
      }
    };

    window.eliminaUtente = async function(pin, nome, cognome) {
      if (!confirm(`ATTENZIONE: Eliminare definitivamente ${nome} ${cognome}?\n\nQuesta azione NON pu√≤ essere annullata.`)) return;

      try {
        const { error: timbratureError } = await supabaseClient
          .from('timbrature')
          .delete()
          .eq('pin', parseInt(pin));

        if (timbratureError) console.error('Errore eliminazione timbrature:', timbratureError);

        const { error: utenteError } = await supabaseClient
          .from('utenti')
          .delete()
          .eq('pin', parseInt(pin));

        if (utenteError) throw utenteError;

        alert(`‚úÖ ${nome} ${cognome} eliminato definitivamente.\nPIN ${pin} ora disponibile.`);
        caricaUtenti();

      } catch (error) {
        console.error('Errore eliminazione:', error);
        alert('Errore durante l\'eliminazione: ' + error.message);
      }
    };

    // Inizializzazione
    document.addEventListener('DOMContentLoaded', () => {
      window.supabaseClient = supabaseClient; // Make it globally available for the script
      caricaUtenti();
    });
    /* [UTENTI] false error on DOMContentLoaded removed */
</script>

  <!-- PWA Service Worker -->
  <script>
// Guard SW: disattiva su dev, :8080 e domini *.onrender.com. Registra solo se sw.js esiste.
(function(){
  try{
    const urlParams = new URLSearchParams(window.location.search);
    const noSW = urlParams.get('no-sw') === '1';
    const host = location.hostname;
    const port = location.port;
    const isDev = host === 'localhost' || host.includes('replit.dev') || port === '5000' || port === '5173';
    const isStatic8080 = port === '8080';
    const isRender = /\.onrender\.com$/.test(host);

    if (noSW || isDev || isStatic8080 || isRender) {
      if ('serviceWorker' in navigator) {
        navigator.serviceWorker.getRegistrations().then(regs => regs.forEach(r => r.unregister().catch(()=>{})));
        if ('caches' in window) { caches.keys().then(names => names.forEach(n => caches.delete(n).catch(()=>{}))); }
        console.info('[SW] Unregistered (env guard)');
      }
    } else {
      if ('serviceWorker' in navigator) {
        const swPath = '/sw.js';
        fetch(swPath, { method:'HEAD' }).then(r=>{
          if (r && r.ok) /* SW register stripped */.catch(()=>{});
          else console.info('[SW] Not found, skip');
        }).catch(()=>console.info('[SW] Skip'));
      }
    }
  }catch(e){ console.info('[SW] Guard error:', e?.message||e); }
})();
</script>
<!-- REC004-SINGLETON-HOOK -->
<script type="module">
  import { supabaseClient as supabase } from './assets/scripts/supabase-client.js';
  window.supabase = supabase;
  console.info('[UTENTI] Singleton Supabase attivo');
</script>
<script type="module">import { installUsersStable } from './assets/scripts/users-stable.mjs'; installUsersStable();
<script>
/* REC-SW-GUARD-ALL */
(function(){
  try{
    const host = location.hostname, port = location.port;
    const isDev = host==='localhost' || host.includes('replit.dev') || port==='5000' || port==='5173';
    const is8080 = port==='8080';
    const isRender = /\.onrender\.com$/.test(host);
    if ('serviceWorker' in navigator) {
      if (isDev || is8080 || isRender || (new URLSearchParams(location.search)).get('no-sw')==='1') {
        navigator.serviceWorker.getRegistrations?.().then(rs=>rs.forEach(r=>r.unregister().catch(()=>{})));
        if ('caches' in window) caches.keys().then(ns=>ns.forEach(n=>caches.delete(n).catch(()=>{})));
        console.info('[SW] Unregistered (env guard)');
      } else {
        const swPath='/sw.js';
        fetch(swPath,{method:'HEAD'}).then(r=>{
          if(r&&r.ok) navigator.serviceWorker.register(swPath).catch(()=>{});
          else console.info('[SW] Not found, skip');
        }).catch(()=>console.info('[SW] Skip'));
      }
    }
  }catch(e){ console.info('[SW] guard error', e?.message||e); }
})();
</script>
</body>
</html>