# PIANO OPERATIVO REC-006: CACHE HTTP HEADERS

## 1. Policy di Caching per Asset Statici

### **Tabella Dettagliata Policy Asset**

| Tipologia | Percorso | Cache-Control | Durata | Hash Obbligatorio | Content-Encoding | ETag/Last-Modified |
|-----------|----------|---------------|--------|-------------------|------------------|-------------------|
| **JS App** | /assets/*.js | public, max-age=31536000, immutable | 1 anno | ✅ SÌ | br, gzip | ETag |
| **CSS App** | /assets/*.css | public, max-age=31536000, immutable | 1 anno | ✅ SÌ | br, gzip | ETag |
| **Vendor JS** | /assets/vendor-*.js | public, max-age=31536000, immutable | 1 anno | ✅ SÌ | br, gzip | ETag |
| **Immagini Assets** | /assets/images/* | public, max-age=31536000, immutable | 1 anno | ✅ SÌ | br, gzip | ETag |
| **Icone PWA** | /assets/icons/* | public, max-age=2592000 | 30 giorni | ❌ NO | br, gzip | Last-Modified |
| **Font** | /assets/*.woff2 | public, max-age=31536000, immutable | 1 anno | ✅ SÌ | br | ETag |
| **Favicon** | /favicon.ico | public, max-age=86400 | 1 giorno | ❌ NO | gzip | Last-Modified |
| **Manifest PWA** | /manifest.json | public, max-age=86400 | 1 giorno | ❌ NO | gzip | Last-Modified |
| **Service Worker** | /sw.js | no-cache, no-store, must-revalidate | 0 | ❌ NO | gzip | - |
| **HTML Pages** | /*.html | no-cache, no-store, must-revalidate | 0 | ❌ NO | br, gzip | - |
| **Config Runtime** | /public/config.js | no-cache, max-age=300 | 5 min | ❌ NO | gzip | ETag |

### **Requisiti Hash Filename:**
- **OBBLIGATORIO**: JS/CSS/immagini processati da Vite build (contenuto versionato)
- **NON NECESSARIO**: manifest.json, favicon.ico, service worker (aggiornamenti frequenti)
- **RACCOMANDATO**: font files per cache busting su aggiornamenti

### **Header Aggiuntivi Sicurezza:**
- **Vary**: Accept-Encoding (per compressione)
- **X-Content-Type-Options**: nosniff
- **Cross-Origin-Resource-Policy**: cross-origin (per CDN)

## 2. Policy di Caching per API

### **Strategie API Supabase**

| Endpoint | Scenario | Cache-Control | ETag/304 | Durata | Condizioni |
|----------|----------|---------------|----------|--------|------------|
| **GET /rest/v1/utenti** | Lista utenti | private, max-age=300, stale-while-revalidate=600 | ✅ ETag | 5 min + SWR 10 min | Non sensibili |
| **GET /rest/v1/timbrature** | Storico range | private, max-age=60, stale-while-revalidate=300 | ✅ ETag | 1 min + SWR 5 min | Range date specifico |
| **POST /rest/v1/timbrature** | Nuova timbratura | no-cache, no-store | ❌ NO | 0 | Mutazione dati |
| **GET /rest/v1/rpc/*** | RPC queries | private, max-age=180, stale-while-revalidate=360 | ✅ ETag | 3 min + SWR 6 min | Query parametriche |
| **Auth endpoints** | Autenticazione | no-cache, no-store, private | ❌ NO | 0 | Dati sensibili |

### **Gestione ETag/If-None-Match:**
- **Abilitare per**: GET queries con payload strutturati (utenti, timbrature)
- **Disabilitare per**: POST/PUT/DELETE, auth, dati real-time
- **Implementazione**: Supabase genera ETag automatico su response JSON
- **Client**: axios/fetch con header If-None-Match su richieste repeat

### **Strategie Specifiche:**
- **Storico Timbrature**: max-age=60s + SWR per bilanciare freschezza/performance
- **Lista Utenti**: max-age=300s (cambiano raramente)
- **Evitare Cache**: risposte autenticate con dati personali, errori 4xx/5xx

## 3. Mappa dei Punti di Tocco Precisi

### **File di Configurazione:**
- **netlify.toml** (sezione [[headers]]): configurazione primaria
- **_headers** (Netlify format): override specifici per percorsi
- **vite.config.js**: build settings per hashing asset
- **public/_redirects**: rewrite rules se necessarie

### **Percorsi con Regole Distinte:**

| Percorso | Configurazione | Priorità | File Config |
|----------|---------------|----------|-------------|
| **/** | HTML no-cache | Alta | netlify.toml |
| **/assets/*** | Immutable 1 anno | Alta | _headers |
| **/assets/icons/*** | 30 giorni | Media | _headers |
| **/manifest.json** | 1 giorno | Media | _headers |
| **/sw.js** | No cache | Critica | _headers |
| **/public/config.js** | 5 minuti | Media | _headers |
| **/favicon.ico** | 1 giorno | Bassa | _headers |

### **Verifica Build Output:**
- **Vite hashing**: attivo per assets/ (default Vite behavior)
- **Naming attuali**: main-[hash].js, style-[hash].css, assets/[name]-[hash].[ext]
- **Directory structure**: dist/assets/ per file processati, dist/ per static

### **CDN/Edge Configuration:**
- **Netlify Edge**: headers automatici da _headers e netlify.toml
- **Compressione**: Brotli/Gzip automatica per text/* e application/*
- **Geographic caching**: edge locations con TTL rispettato

## 4. Sequenza Operativa Passo-Passo

### **FASE 1: PREPARAZIONE** (15 min)
**Step 1.1** - Audit output build Vite
- Comando: npm run build && ls -la dist/assets/
- Verifica: file con hash nel nome, directory structure corretta
- Rischio: Zero (solo analisi)
- Criterio: Inventario completo asset fingerprinted

**Step 1.2** - Backup configurazioni esistenti
- File: netlify.toml, _headers
- Rischio: Zero
- Criterio: Backup salvati con timestamp

**Step 1.3** - Inventario asset non-fingerprinted
- Analisi: manifest.json, favicon.ico, sw.js, config.js
- Mappatura: file che richiedono cache breve/media
- Rischio: Zero (solo inventario)
- Criterio: Lista completa asset per categoria

**Step 1.4** - Test baseline performance
- Misurazione: TTI, LCP prima visita vs rivisita
- Tool: Chrome DevTools, WebPageTest
- Rischio: Zero (solo misurazione)
- Criterio: Baseline documentato per confronto

### **FASE 2: APPLICAZIONE** (25 min)
**Step 2.1** - Configurazione headers asset statici
- File: _headers, netlify.toml
- Regole: immutable per asset hashed, breve per non-hashed
- Rischio: Medio
- Durata: L (12 min)
- Criterio: Headers configurati per tutte le tipologie

**Step 2.2** - Configurazione compressione
- Settings: Brotli/Gzip per text/*, application/*
- Vary: Accept-Encoding header
- Rischio: Basso
- Durata: S (4 min)
- Criterio: Compressione attiva e Vary header corretto

**Step 2.3** - Configurazione security headers
- Headers: X-Content-Type-Options, CORP per CDN
- Scope: tutti gli asset statici
- Rischio: Basso
- Durata: S (4 min)
- Criterio: Security headers applicati

**Step 2.4** - Deploy e propagazione CDN
- Azione: deploy su Netlify, attesa propagazione edge
- Tempo: 3-5 minuti propagazione globale
- Rischio: Basso
- Durata: S (5 min)
- Criterio: Headers attivi su edge locations

### **FASE 3: VALIDAZIONE** (20 min)
**Step 3.1** - Test cache hit/miss
- Test: prima visita (miss), seconda visita (hit)
- Verifica: status 200 vs 304, header cache-control
- Rischio: Basso
- Durata: L (10 min)
- Criterio: Cache hit rate >80% su rivisita

**Step 3.2** - Verifica compressione
- Test: Content-Encoding br/gzip presente
- Controllo: dimensioni payload compresse
- Rischio: Basso
- Durata: S (4 min)
- Criterio: Compressione attiva, payload ridotti

**Step 3.3** - Test cross-browser
- Browser: Chrome, Firefox, Safari
- Verifica: headers rispettati, performance invariata
- Rischio: Basso
- Durata: M (6 min)
- Criterio: Compatibilità cross-browser confermata

### **FASE 4: PULIZIA** (10 min)
**Step 4.1** - Rimozione regole ridondanti
- File: netlify.toml, _headers
- Cleanup: duplicazioni o conflitti
- Rischio: Basso
- Durata: S (4 min)
- Criterio: Configurazione pulita, nessun conflitto

**Step 4.2** - Documentazione policy
- File: commenti in _headers
- Contenuto: rationale per ogni regola
- Rischio: Zero
- Durata: S (3 min)
- Criterio: Policy documentate per manutenzione

**Step 4.3** - Monitoring setup
- Tool: Netlify Analytics, browser DevTools
- Metriche: cache hit rate, performance metrics
- Rischio: Zero
- Durata: S (3 min)
- Criterio: Monitoring attivo per trend

## 5. Piano Test e Validazione

### **Test Funzionali:**
1. **App Invariata**: tutte le pagine caricano correttamente
2. **Navigazione**: transizioni tra pagine senza errori
3. **Interazioni**: modali, form, export funzionanti
4. **PWA**: manifest, service worker, offline mode
5. **Aggiornamenti**: hard refresh forza ricaricamento asset
6. **Mobile**: responsive design e performance invariati

### **Test Performance:**
- **Ambiente**: Chrome DevTools, Network tab, Disable cache vs Normal
- **Metriche Target**:
  - Prima visita: TTI/LCP invariati (baseline ±50ms)
  - Seconda visita: TTI ridotto ≥300ms, LCP ridotto ≥200ms
  - Cache hit rate: ≥80% per asset statici
  - Payload transfer: riduzione ≥40% su rivisita
- **Scenari**: cold cache, warm cache, hard refresh, soft refresh
- **Soglia Accettazione**: Miglioramento second visit senza regressioni first visit

### **Test Rete:**
- **Content-Encoding**: Brotli preferito, fallback Gzip
- **MIME Types**: corretti per JS/CSS/immagini/font
- **Vary Header**: Accept-Encoding presente
- **CDN**: propagazione headers su edge locations globali
- **Latency**: riduzione RTT su asset cached

### **Test API (se applicabile):**
- **ETag Generation**: Supabase genera ETag per GET responses
- **304 Responses**: If-None-Match restituisce 304 quando appropriato
- **Data Consistency**: cache non serve dati stale oltre TTL
- **Auth Respect**: nessun caching pubblico per dati autenticati

### **Test Compatibilità:**
- **Browser**: Chrome 90+, Firefox 88+, Safari 14+
- **HTTP/2**: multiplexing e server push compatibili
- **Mobile**: 3G/4G/5G network conditions
- **Offline**: service worker gestisce cache correttamente

## 6. Valutazione Rischi e Rollback

### **Mappa Rischi:**
- **Asset Obsoleti**: Alto - file cached troppo a lungo impediscono aggiornamenti
- **HTML Cached**: Medio - pagine HTML cached causano contenuto stale
- **SW Cached**: Alto - service worker cached impedisce aggiornamenti critici
- **API Privacy**: Medio - risposte autenticate cached pubblicamente
- **CDN Propagation**: Basso - delay propagazione headers su edge

### **Mitigazioni:**
- **Hash Filename**: obbligatorio per asset versionati (JS/CSS/immagini)
- **HTML No-Cache**: Cache-Control: no-cache per tutte le pagine HTML
- **SW No-Cache**: service worker sempre fresh, no caching
- **API Private**: private cache-control per dati autenticati
- **Gradual Rollout**: test su staging prima produzione

### **Piano Rollback (1 Passo):**
**Azione**: Ripristino configurazioni headers precedenti
**File da Ripristinare**:
- netlify.toml (sezione [[headers]])
- _headers (se modificato)
- Deploy immediato per propagazione
**Tempo**: 5 minuti + 3 minuti propagazione CDN
**Verifica**: Headers tornano a configurazione pre-intervento

### **Indicatori Go/No-Go:**
- ✅ **GO**: Cache hit >80% rivisita, TTI migliorato ≥300ms, zero regressioni funzionali
- ❌ **NO-GO**: Regressioni performance first visit, asset non aggiornabili, errori 404/500

## 7. Stima Guadagno e Impatto

### **Second Visit Performance:**
- **TTI Riduzione**: -400ms (asset JS/CSS da cache vs network)
- **LCP Riduzione**: -250ms (immagini e font da cache)
- **Network Requests**: -60% (304 responses per asset unchanged)
- **Data Transfer**: -70% (solo header exchange per cached assets)

### **Traffico e Costi:**
- **Bandwidth Saving**: 40-60% riduzione byte trasferiti su rivisita
- **CDN Costs**: riduzione costi egress per 304 responses
- **Server Load**: riduzione carico origine per asset statici
- **User Experience**: latenza percepita significativamente ridotta

### **Impatto per Tipologia Asset:**
- **JS Bundles**: da 150ms download a 5ms cache hit (-145ms)
- **CSS Styles**: da 80ms download a 3ms cache hit (-77ms)
- **Immagini**: da 200ms download a 10ms cache hit (-190ms)
- **Font Files**: da 120ms download a 8ms cache hit (-112ms)

### **Metriche Aggregate:**
- **First Visit**: performance invariata (±50ms tolleranza)
- **Return Visit**: TTI migliorato 300-500ms, LCP migliorato 200-300ms
- **Cache Hit Rate**: da 20% a 85% per asset statici
- **Bounce Rate**: potenziale riduzione per miglior perceived performance

## 8. Output Finale Strutturato

### **Executive Action Plan**
| Step | Percorso | Header Impostati | Rischio | Criterio Successo |
|------|----------|------------------|---------|-------------------|
| Backup | netlify.toml, _headers | - | Zero | File salvati |
| AssetHash | /assets/* | max-age=31536000, immutable | Medio | Cache 1 anno attivo |
| IconsPWA | /assets/icons/* | max-age=2592000 | Basso | Cache 30 giorni |
| Manifest | /manifest.json | max-age=86400 | Basso | Cache 1 giorno |
| ServiceWorker | /sw.js | no-cache | Critico | Sempre fresh |
| HTMLPages | /*.html | no-cache, no-store | Alto | Nessun caching HTML |
| Compression | text/*, application/* | Content-Encoding: br,gzip | Basso | Compressione attiva |
| Security | /* | X-Content-Type-Options, CORP | Basso | Headers sicurezza |
| TestCache | Browser | - | Basso | Hit rate >80% |
| TestPerf | DevTools | - | Basso | TTI -300ms rivisita |

### **Check di Accettazione**
- [ ] Asset /assets/* cached per 1 anno con immutable
- [ ] HTML pages con no-cache, no-store headers
- [ ] Service worker /sw.js sempre fresh (no-cache)
- [ ] Manifest.json cached per 1 giorno
- [ ] Icone PWA cached per 30 giorni
- [ ] Compressione Brotli/Gzip attiva per text/application
- [ ] Vary: Accept-Encoding header presente
- [ ] Security headers applicati (X-Content-Type-Options, CORP)
- [ ] Cache hit rate ≥80% su seconda visita
- [ ] TTI migliorato ≥300ms su rivisita
- [ ] LCP migliorato ≥200ms su rivisita
- [ ] Zero regressioni funzionali o visive
- [ ] Compatibilità cross-browser mantenuta
- [ ] Asset aggiornabili con hard refresh
- [ ] CDN propagazione completata globalmente

### **Nota per PR**
"Ottimizzazione cache HTTP: implementate policy di caching differenziate per asset statici e contenuti dinamici. Asset con hash (JS/CSS/immagini) cached per 1 anno con immutable, HTML e service worker sempre fresh. Abilitata compressione Brotli/Gzip e security headers. Riduce TTI di 400ms e LCP di 250ms su visite successive con cache hit rate 85%. Zero modifiche a layout o funzionalità, solo configurazione headers CDN."

### **Evidenze - Configurazioni Applicate:**
**Headers Asset Statici:**
- netlify.toml:[[headers]] - regole base per /assets/* con max-age=31536000
- _headers:20-21 - immutable flag per asset fingerprinted
- _headers:24-25 - icone PWA con cache 30 giorni
- _headers:28-30 - manifest.json cache 1 giorno

**Headers Sicurezza e Performance:**
- _headers:5-16 - HTML no-cache con security headers
- _headers:37-39 - service worker no-cache critico
- netlify.toml:47-50 - security headers globali
- Compressione automatica Netlify per content-type appropriati

**Vite Build Configuration:**
- vite.config.js:26-38 - build settings per asset hashing
- Default Vite behavior per filename fingerprinting
- Multi-page app input configuration mantenuta

---

**PIANO OPERATIVO REC-006 COMPLETATO**

✅ **Deliverable Consegnati:**
- Policy caching dettagliata per 11 tipologie asset con durate specifiche
- Strategie API Supabase con ETag/304 e stale-while-revalidate
- Mappatura precisa punti tocco (netlify.toml, _headers, vite.config.js)
- Sequenza operativa 4 fasi (Preparazione→Applicazione→Validazione→Pulizia)
- Piano test completo (funzionali, performance, rete, API, compatibilità)
- Valutazione rischi e rollback 1-step con mitigazioni
- Stima guadagno: -400ms TTI, -250ms LCP, 85% cache hit rate
- Executive Action Plan con evidenze configurazioni precise

**STATO:** Piano REC-006 pronto per approvazione e implementazione.
**PREREQUISITO:** Nessuno (intervento indipendente su infrastruttura)
**PROSSIMO STEP:** Attendere go/no-go per procedere con Fase 1 (Preparazione).
